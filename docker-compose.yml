version: "3.8"

services:
  rabbitmq:
    image: rabbitmq:3.9-management
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
  redis:
    image: redis:7-alpine
    networks:
      - app-network
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 2s
      retries: 5

  orchestrator:
    build:
      context: ./orchestrator
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    networks:
      - app-network
    environment:
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GROQ_API_KEY=${GROQ_API_KEY}
      - PYTHONUNBUFFERED=1
      - FLASK_DEBUG=1
      - REDIS_HOST=redis
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./orchestrator:/app
      - ./uploads:/app/uploads

  data_cleaner:
    build:
      context: ./containers/data_cleaner
      dockerfile: Dockerfile
    networks:
      - app-network
    depends_on:
      rabbitmq:
        condition: service_healthy

    command: ["python", "/app/data_cleaner_consumer.py"]
    volumes:
      - ./containers/data_cleaner:/app
      - ./uploads:/app/uploads
    environment:
      - PYTHONUNBUFFERED=1
      - REDIS_HOST=redis

  sentiment_analyzer:
    build:
      context: ./containers/sentiment_analyzer
      dockerfile: Dockerfile
    networks:
      - app-network
    depends_on:
      rabbitmq:
        condition: service_healthy
    command: ["python", "/app/sentiment_analyzer_consumer.py"]
    volumes:
      - ./containers/sentiment_analyzer:/app

    environment:
      - PYTHONUNBUFFERED=1
      - REDIS_HOST=redis

networks:
  app-network:
    driver: bridge
